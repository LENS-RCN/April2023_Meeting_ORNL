getwd()
getwd()
# Set root folder that is our shared MSB Google Drive
root_folder <- 'G:/Shared drives/MacrosystemsBiodiversity'
# Set your working directory to the root folder
setwd(file.path(root_folder))
# Define a file path for exporting from this script.
export_path <- file.path(root_folder, 'manuscripts/NEON_TIEE/ROoutputs')
# Import data path set to landuse data
landusedata_path <- file.path(root_folder, 'data/landuse')
# Import data path for site shapefile
NEONspatialdata_path <- file.path(root_folder, 'data/neon_spatial/L0')
# Load relevant R packages
library(terra)
library(rgeos)
library(tidyverse)
# Read in NEON site boundaries shapefile as a spatial polygons vector
NEONsiteshp <- vect(file.path(NEONspatialdata_path,"Field_Sampling_Boundaries_2020/terrestrialSamplingBoundaries.shp"))
# Read in NEON Terrestrial Observation System plot centroids shapefile as a spatial points vector
NEONTOSshp <- vect(file.path(NEONspatialdata_path,"All_NEON_TOS_Plots_V9/All_NEON_TOS_Plot_Centroids_V9.shp"))
# Read in GRSM roads shapefile as a spatial polygons vector.
GRSMlinearshp <- vect(file.path(landusedata_path, "L1/linear_features/GRSM/linear_features.shp"))
plot(GRSMlinearshp)
plot(NEONsiteshp, add=TRUE, col="#999999")
plot(GRSMplotslidar, add=TRUE, col="#E69F00")
plot(GRSMlinearshp)
plot(NEONsiteshp, add=TRUE, col="#999999")
plot(NEONTOSshp, add=TRUE, col="#E69F00")
# Crop NEON TOS plot points to LiDAR data.
GRSMplotslidar <- crop(NEONTOSshp, GRSMlinearshp)
# Plot the cropped points overlaid onto the roads layer to make sure that you have accomplished what you intended.
plot(GRSMlinearshp)
plot(NEONTOSshp, add=TRUE, col="#E69F00")
plot(GRSMplotslidar, add=TRUE, col="#E69F00")
# Crop NEON TOS plot points to LiDAR data.
GRSMplotslidar <- crop(NEONTOSshp, GRSMlinearshp)
# Plot the cropped points overlaid onto the roads layer to make sure that you have accomplished what you intended.
plot(GRSMlinearshp)
plot(GRSMplotslidar, add=TRUE, col="#E69F00")
# Set root folder that is our shared MSB Google Drive
root_folder <- 'G:/Shared drives/Record_Lab/GRSM_Tutorial'
# Set your working directory to the root folder
setwd(file.path(root_folder))
# Load relevant R packages
library(terra)
library(rgeos)
library(tidyverse)
# Read in the hillshade map (i.e., digital elevation model) generated from the NEON LiDAR data
dem <- terra::rast(file.path(root_folder,"Data/finalGRSM.TIF"))
# Plot the hillshade map of the GRSM site
plot(dem, col = grey(1:90/100), legend=FALSE)
# Set root folder that is our shared MSB Google Drive
root_folder <- 'G:/Shared drives/Record_Lab/GRSM_Tutorial'
# Set your working directory to the root folder
setwd(file.path(root_folder))
# Load relevant R packages
library(terra)
library(rgeos)
library(tidyverse)
# Read in the hillshade map (i.e., digital elevation model) generated from the NEON LiDAR data
dem <- terra::rast(file.path(root_folder,"Data/finalGRSM.TIF"))
# Plot the hillshade map of the GRSM site
plot(dem, col = grey(1:90/100), legend=FALSE)
# Read in NEON site boundaries shapefile as a spatial polygons vector
NEONsiteshp <- terra::vect(file.path(root_folder,"Data/TerrestrialSamplingBoundaries/terrestrialSamplingBoundaries.shp"))
# Read in NEON Terrestrial Observation System plot centroids shapefile as a spatial points vector
NEONTOSshp <- terra::vect(file.path(root_folder,"Data/All_NEON_TOS_Plot_Centroids_V9/All_NEON_TOS_Plot_Centroids_V9.shp"))
# Read in GRSM roads shapefile as a spatial polygons vector.
GRSMlinearshp <- terra::vect(file.path(root_folder,"Data/GRSM_linear_features/linear_features.shp"))
# Plot these shapefiles together
plot(GRSMlinearshp)
plot(NEONsiteshp, add=TRUE, col="#999999")
plot(NEONTOSshp, add=TRUE, col="#E69F00")
# Crop NEON TOS plot points to LiDAR data.
GRSMplotslidar <- crop(NEONTOSshp, GRSMlinearshp)
# Plot the cropped points overlaid onto the roads layer to make sure that you have accomplished what you intended.
plot(GRSMlinearshp)
plot(GRSMplotslidar, add=TRUE, col="#E69F00")
crs(GRSMplotslidar)
crs(dem)
# Project linear features and TOS plot centroids to UTM projection for NEON site based on UTM of AOP data derived hillshade map
GRSMplotslidarproj <- project(GRSMplotslidar, dem)
GRSMlinearproj <- project(GRSMlinearshp,dem)
# calculate the perpendicular distance from plots to the nearest road in meters
ptroad <-apply(distance(GRSMplotslidarproj,GRSMlinearproj),1, min)
# Create a tibble containing only information on plotID, plot subtype that indicates the type of observation plot, and distance in meters.
distRoad<-tibble(plotID=GRSMplotslidarproj$plotID, subtype=GRSMplotslidarproj$subtype, distancem=ptroad)
distRoad
?gdistance
??Gdistance
# Uncomment the below line of code if you need to install neonDivData
#install.packages("neonDivData", repos = 'https://daijiang.r-universe.dev')
library(neonDivData)
?neon_taxa
# Subset all NEON bird data down to GRSM observations
birds <- filter(neonDivData::data_bird, siteID=="GRSM")
# How many unique taxa of birds are across GRSM?
length(unique(birds$taxon_id))
# Determine simple metric of taxonomic richness of birds per plot across GRSM
birdsrich <- birds %>%
group_by(plotID) %>%
summarise(richness = length(unique((taxon_id))))
# Determine simple metric of taxonomic richness of birds per plot across GRSM
birdsrich <- birds %>%
group_by(plotID) %>%
summarise(richness = length(unique((taxon_id))))
birdsrich
# Join birdsrich and distRoad from birdGrids
birdsdist <- distRoad %>%
filter(subtype=='birdGrid')
birdsrichdist <- left_join(birdsrich, birdsdist)
birdsrichdist
ggplot(birdsrichdist, main='Birds') +
geom_point(aes(x=distancem, y=richness)) +
expand_limits(x=0,y=0) +
labs(title="Birds", x="Distance from Road (m)", y="Richness")
